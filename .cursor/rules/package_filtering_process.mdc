# Pluggable Rule Filtering System

## Overview
The Enterprise Contract CLI uses a flexible rule filtering system that allows you to filter Rego rules based on various criteria before evaluation. The system is designed to be extensible and composable, making it easy to add new filtering criteria.

## Architecture

### Core Components
- **`RuleFilter` interface**: Defines the contract for all filters
- **`FilterFactory` interface**: Creates filters from source configuration
- **`filterNamespaces()` function**: Applies multiple filters in sequence with AND logic
- **Individual filter implementations**: Each filter implements the `RuleFilter` interface

### Current Filters
- **`PipelineIntentionFilter`**: Filters rules based on `pipeline_intention` metadata
- **`IncludeListFilter`**: Filters rules based on include/exclude configuration (collections, packages, rules)

## Interface Definitions

```go
// RuleFilter decides whether an entire package (namespace) should be
// included in the evaluation set.
type RuleFilter interface {
    Include(pkg string, rules []rule.Info) bool
}

// FilterFactory builds a slice of filters for a given `ecc.Source`.
type FilterFactory interface {
    CreateFilters(source ecc.Source) []RuleFilter
}
```

## Current Implementation

### DefaultFilterFactory
The default factory creates filters based on source configuration:

```go
type DefaultFilterFactory struct{}

func NewDefaultFilterFactory() FilterFactory { 
    return &DefaultFilterFactory{} 
}

func (f *DefaultFilterFactory) CreateFilters(source ecc.Source) []RuleFilter {
    var filters []RuleFilter

    // 1. Pipeline-intention filter
    intentions := extractStringArrayFromRuleData(source, "pipeline_intention")
    if len(intentions) > 0 {
        filters = append(filters, NewPipelineIntentionFilter(intentions))
    }

    // 2. Include list (handles @collection / pkg / pkg.rule)
    if source.Config != nil && len(source.Config.Include) > 0 {
        filters = append(filters, NewIncludeListFilter(source.Config.Include))
    }

    return filters
}
```

### PipelineIntentionFilter
Filters rules based on `pipeline_intention` metadata:

```go
// If `targetIntentions` is empty, the filter is a NO-OP (includes everything).
type PipelineIntentionFilter struct{ 
    targetIntentions []string 
}

func NewPipelineIntentionFilter(target []string) RuleFilter {
    return &PipelineIntentionFilter{targetIntentions: target}
}

func (f *PipelineIntentionFilter) Include(_ string, rules []rule.Info) bool {
    if len(f.targetIntentions) == 0 {
        return true // no filtering requested
    }
    for _, r := range rules {
        for _, pi := range r.PipelineIntention {
            for _, want := range f.targetIntentions {
                if pi == want {
                    return true
                }
            }
        }
    }
    return false
}
```

### IncludeListFilter
Filters rules based on include configuration (collections, packages, rules):

```go
// Entries may be:
//   • "@collection"         – any rule whose metadata lists that collection
//   • "package"             – whole package
//   • "package.rule"        – rule-scoped, still selects the whole package
type IncludeListFilter struct{ 
    entries []string 
}

func NewIncludeListFilter(entries []string) RuleFilter {
    return &IncludeListFilter{entries: entries}
}

func (f *IncludeListFilter) Include(pkg string, rules []rule.Info) bool {
    for _, entry := range f.entries {
        switch {
        case entry == pkg:
            return true
        case strings.HasPrefix(entry, "@"):
            want := strings.TrimPrefix(entry, "@")
            for _, r := range rules {
                for _, c := range r.Collections {
                    if c == want {
                        return true
                    }
                }
            }
        case strings.Contains(entry, "."):
            parts := strings.SplitN(entry, ".", 2)
            if len(parts) == 2 && parts[0] == pkg {
                return true
            }
        }
    }
    return false
}
```

### NamespaceFilter
Applies all filters with logical AND:

```go
type NamespaceFilter struct{ 
    filters []RuleFilter 
}

func NewNamespaceFilter(filters ...RuleFilter) *NamespaceFilter {
    return &NamespaceFilter{filters: filters}
}

func (nf *NamespaceFilter) Filter(rules policyRules) []string {
    // group rules by package
    grouped := make(map[string][]rule.Info)
    for fqName, r := range rules {
        pkg := strings.SplitN(fqName, ".", 2)[0]
        if pkg == "" {
            pkg = fqName // fallback
        }
        grouped[pkg] = append(grouped[pkg], r)
    }

    var out []string
    for pkg, pkgRules := range grouped {
        include := true
        for _, flt := range nf.filters {
            ok := flt.Include(pkg, pkgRules)

            // Trace line for debugging
            log.Debugf("TRACE %-30T pkg=%-15s → %v", flt, pkg, ok)

            if !ok {
                include = false
                break
            }
        }

        if include {
            out = append(out, pkg)
        }
    }
    return out
}
```

## Integration with Conftest Evaluator

### Filtering Process
The filtering is integrated into the `Evaluate` method in `conftest_evaluator.go`:

```go
func (c conftestEvaluator) Evaluate(ctx context.Context, target EvaluationTarget) ([]Outcome, error) {
    // ... existing code ...

    // Filter namespaces using the new pluggable filtering system
    filterFactory := NewDefaultFilterFactory()
    filters := filterFactory.CreateFilters(c.source)
    filteredNamespaces := filterNamespaces(rules, filters...)

    // ... existing code ...

    var r testRunner
    var ok bool
    if r, ok = ctx.Value(runnerKey).(testRunner); r == nil || !ok {
        // Determine which namespaces to use
        namespaceToUse := c.namespace

        // If we have filtered namespaces from the filtering system, use those
        if len(filteredNamespaces) > 0 {
            namespaceToUse = filteredNamespaces
        } else if len(c.namespace) == 0 {
            // When no namespaces are specified and filtering results in empty list,
            // use an empty namespace list to prevent any evaluation
            namespaceToUse = []string{}
        }

        r = &conftestRunner{
            runner.TestRunner{
                Data:          []string{c.dataDir},
                Policy:        []string{c.policyDir},
                Namespace:     namespaceToUse,
                AllNamespaces: false, // Always false to prevent bypassing filtering
                NoFail:        true,
                Output:        c.outputFormat,
                Capabilities:  c.CapabilitiesPath(),
            },
        }
    }

    // ... rest of evaluation logic ...
}
```

## How to Add a New Filter

### Step 1: Define the Filter Structure
Create a new struct that implements the `RuleFilter` interface:

```go
type MyCustomFilter struct {
    targetValues []string
}

func NewMyCustomFilter(targetValues []string) RuleFilter {
    return &MyCustomFilter{
        targetValues: targetValues,
    }
}
```

### Step 2: Implement the Filtering Logic
Implement the `Include` method:

```go
func (f *MyCustomFilter) Include(pkg string, rules []rule.Info) bool {
    // If no target values are configured, include all packages
    if len(f.targetValues) == 0 {
        return true
    }

    // Include packages with rules that have matching values
    for _, rule := range rules {
        for _, ruleValue := range rule.YourField {
            for _, targetValue := range f.targetValues {
                if ruleValue == targetValue {
                    log.Debugf("Including package %s: rule has matching value %s", pkg, targetValue)
                    return true
                }
            }
        }
    }
    
    log.Debugf("Excluding package %s: no rules match target values %v", pkg, f.targetValues)
    return false
}
```

### Step 3: Update DefaultFilterFactory
Add your filter to the `CreateFilters` method:

```go
func (f *DefaultFilterFactory) CreateFilters(source ecc.Source) []RuleFilter {
    var filters []RuleFilter

    // Existing filters...
    intentions := extractStringArrayFromRuleData(source, "pipeline_intention")
    if len(intentions) > 0 {
        filters = append(filters, NewPipelineIntentionFilter(intentions))
    }

    if source.Config != nil && len(source.Config.Include) > 0 {
        filters = append(filters, NewIncludeListFilter(source.Config.Include))
    }

    // Add your custom filter
    myCustomValues := extractStringArrayFromRuleData(source, "your_field_name")
    if len(myCustomValues) > 0 {
        filters = append(filters, NewMyCustomFilter(myCustomValues))
    }

    return filters
}
```

### Step 4: Add Metadata Field to Rule.Info (if needed)
If your filter requires new metadata from Rego rules, add the field to `internal/opa/rule/rule.go`:

```go
type Info struct {
    // ... existing fields ...
    YourField []string `json:"your_field,omitempty"`
}
```

### Step 5: Update Rego Rule Metadata
In your Rego rules, add the metadata:

```rego
# METADATA
# title: My Rule
# description: This rule demonstrates custom filtering
# custom:
#   your_field:
#     - value1
#     - value2
deny contains msg if {
    # rule logic
}
```

### Step 6: Write Tests
Create comprehensive tests for your filter:

```go
func TestMyCustomFilter(t *testing.T) {
    rules := policyRules{
        "pkg1.rule1": rule.Info{
            Code:     "pkg1.rule1",
            Package:  "pkg1",
            YourField: []string{"value1", "value2"},
        },
        "pkg2.rule2": rule.Info{
            Code:     "pkg2.rule2",
            Package:  "pkg2",
            YourField: []string{"value3"},
        },
    }
    
    tests := []struct {
        name                    string
        targetValues            []string
        expectedFilteredNamespaces []string
    }{
        {
            name:                    "filters by your_field",
            targetValues:            []string{"value1"},
            expectedFilteredNamespaces: []string{"pkg1"},
        },
        {
            name:                    "no target values - include all",
            targetValues:            []string{},
            expectedFilteredNamespaces: []string{"pkg1", "pkg2"},
        },
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            filter := NewMyCustomFilter(tt.targetValues)
            filteredNamespaces := filterNamespaces(rules, filter)
            
            assert.Equal(t, tt.expectedFilteredNamespaces, filteredNamespaces)
        })
    }
}
```

## Usage Examples

### Single Filter
```go
pipelineFilter := NewPipelineIntentionFilter([]string{"release", "production"})
filteredNamespaces := filterNamespaces(rules, pipelineFilter)
```

### Multiple Filters (AND logic)
```go
filters := []RuleFilter{
    NewPipelineIntentionFilter([]string{"release"}),
    NewIncludeListFilter([]string{"@security"}),
}
filteredNamespaces := filterNamespaces(rules, filters...)
```

### From Source Configuration
```go
filterFactory := NewDefaultFilterFactory()
filters := filterFactory.CreateFilters(source)
filteredNamespaces := filterNamespaces(rules, filters...)
```

## Helper Functions

### extractStringArrayFromRuleData
Extracts a string array from ruleData for a given key, handling both single string values and arrays:

```go
func extractStringArrayFromRuleData(source ecc.Source, key string) []string {
    var result []string
    if source.RuleData == nil {
        return result
    }

    var ruleDataMap map[string]interface{}
    if err := json.Unmarshal(source.RuleData.Raw, &ruleDataMap); err != nil {
        log.Debugf("Failed to parse ruleData: %v", err)
        return result
    }

    if values, ok := ruleDataMap[key]; ok {
        switch v := values.(type) {
        case []interface{}:
            for _, item := range v {
                if vStr, ok := item.(string); ok {
                    result = append(result, vStr)
                }
            }
        case string:
            result = append(result, v)
        }
    }

    return result
}
```

## File Organization

The filtering system is organized in the following files:

- `internal/evaluator/conftest_evaluator.go`: Main evaluator logic and the `Evaluate` method
- `internal/evaluator/filters.go`: All filtering-related code including:
  - `RuleFilter` interface
  - `FilterFactory` interface
  - `PipelineIntentionFilter` implementation
  - `IncludeListFilter` implementation
  - `NamespaceFilter` implementation
  - `filterNamespaces()` function
  - Helper functions for extracting configuration
  - `DefaultFilterFactory` for creating filters from source configuration

## Best Practices

### 1. Follow the Existing Pattern
- Use the same error handling approach as existing filters
- Include appropriate debug logging with `log.Debugf`
- Handle edge cases (nil values, wrong types, empty arrays)

### 2. Filter Behavior
- **No configuration**: Decide whether to return all packages or none
- **Empty array**: Decide whether to return no packages or all packages
- **Invalid types**: Gracefully handle non-string values

### 3. Performance
- Keep filtering logic efficient for large rule sets
- Consider early termination when possible
- Use appropriate data structures for lookups

### 4. Documentation
- Add clear comments explaining the filter's purpose
- Document the expected format of ruleData
- Include examples in comments

## Integration Points

### Policy Configuration
Add your field to the policy configuration:

```yaml
sources:
  - policy:
      - oci::quay.io/enterprise-contract/ec-release-policy:latest
    data:
      - git::https://github.com/conforma/policy//example/data
    ruleData:
      your_field_name: ["value1", "value2"]
```

### Rule Metadata
Update Rego rule metadata extraction in `internal/opa/rule/rule.go` if needed.

### Documentation
Update user documentation to explain the new filtering capability.

## Testing Considerations
- Test with various ruleData configurations
- Test edge cases (nil, empty, invalid types)
- Test performance with large rule sets
- Test integration with other filters
- Test the AND logic when combining multiple filters

## Migration from Old System
The old `filterNamespacesByPipelineIntention` method has been refactored to use the new filtering system while maintaining backward compatibility.

This extensible design makes it easy to add new filtering criteria without modifying existing code, following the Open/Closed Principle.

## Recent Fix: Filtering Leak Prevention

### Problem
When filtering resulted in an empty list of namespaces, the conftest runner was still configured with `AllNamespaces=true`, which would evaluate ALL namespaces regardless of filtering.

### Solution
Simplified the namespace configuration logic to prevent the leak by always setting `AllNamespaces=false`:

```go
// Determine which namespaces to use
namespaceToUse := c.namespace

// If we have filtered namespaces from the filtering system, use those
if len(filteredNamespaces) > 0 {
    namespaceToUse = filteredNamespaces
} else if len(c.namespace) == 0 {
    // When no namespaces are specified and filtering results in empty list,
    // use an empty namespace list to prevent any evaluation
    namespaceToUse = []string{}
}

r = &conftestRunner{
    runner.TestRunner{
        Data:          []string{c.dataDir},
        Policy:        []string{c.policyDir},
        Namespace:     namespaceToUse,
        AllNamespaces: false, // Always false to prevent bypassing filtering
        NoFail:        true,
        Output:        c.outputFormat,
        Capabilities:  c.CapabilitiesPath(),
    },
}
```

This ensures that conftest is always configured with `AllNamespaces=false`, preventing any evaluation of excluded namespaces regardless of the filtering results. 